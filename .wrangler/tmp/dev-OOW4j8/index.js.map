{
  "version": 3,
  "sources": ["../bundle-5AUzdH/checked-fetch.js", "../../../worker/index.js", "../../../node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../bundle-5AUzdH/middleware-insertion-facade.js", "../../../node_modules/wrangler/templates/middleware/common.ts", "../bundle-5AUzdH/middleware-loader.entry.ts"],
  "sourceRoot": "/Users/skotay/Documents/code/barzo-pwa/.wrangler/tmp/dev-OOW4j8",
  "sourcesContent": ["const urls = new Set();\n\nfunction checkURL(request, init) {\n\tconst url =\n\t\trequest instanceof URL\n\t\t\t? request\n\t\t\t: new URL(\n\t\t\t\t\t(typeof request === \"string\"\n\t\t\t\t\t\t? new Request(request, init)\n\t\t\t\t\t\t: request\n\t\t\t\t\t).url\n\t\t\t\t);\n\tif (url.port && url.port !== \"443\" && url.protocol === \"https:\") {\n\t\tif (!urls.has(url.toString())) {\n\t\t\turls.add(url.toString());\n\t\t\tconsole.warn(\n\t\t\t\t`WARNING: known issue with \\`fetch()\\` requests to custom HTTPS ports in published Workers:\\n` +\n\t\t\t\t\t` - ${url.toString()} - the custom port will be ignored when the Worker is published using the \\`wrangler deploy\\` command.\\n`\n\t\t\t);\n\t\t}\n\t}\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\tconst [request, init] = argArray;\n\t\tcheckURL(request, init);\n\t\treturn Reflect.apply(target, thisArg, argArray);\n\t},\n});\n", "export default {\n  async fetch(request, env) {\n    try {\n      const url = new URL(request.url);\n      \n      // CORS headers\n      const corsHeaders = {\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Methods': 'GET, POST, DELETE, OPTIONS',\n        'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n      };\n\n      // Handle CORS preflight\n      if (request.method === 'OPTIONS') {\n        return new Response(null, { \n          headers: {\n            ...corsHeaders,\n            'Access-Control-Max-Age': '86400',\n          }\n        });\n      }\n\n      // PWA Authentication Check\n      const isPWA = url.searchParams.has('pwa');\n      const authToken = url.searchParams.get('authToken');\n      \n      if (isPWA && !authToken) {\n        // Redirect to authentication\n        const currentUrl = encodeURIComponent(request.url);\n        return Response.redirect(`https://barzo.work?redirect=${currentUrl}`);\n      }\n\n      if (authToken) {\n        // Parse user info from authToken\n        try {\n          console.log('Auth token received:', {\n            length: authToken.length,\n            sample: authToken.substring(0, 20) + '...'\n          });\n          const userInfo = JSON.parse(decodeURIComponent(authToken));\n          console.log('Parsed user info:', userInfo);\n          \n          // Create subscription key using identity\n          const subscriptionKey = `subscription:${userInfo?.token?.identity.userId}`;\n          \n          // Try to get existing subscription\n          let subscription = await env.SUBSCRIPTIONS.get(subscriptionKey);\n          \n          if (!subscription) {\n            // Create new subscription with identity binding\n            const newSubscription = {\n              userId: userInfo.id,\n              createdAt: new Date().toISOString(),\n              lastUsed: new Date().toISOString()\n            };\n            \n            await env.SUBSCRIPTIONS.put(subscriptionKey, JSON.stringify(newSubscription));\n            subscription = JSON.stringify(newSubscription);\n          }\n        } catch (error) {\n          console.error('Auth token parsing error:', {\n            error: error.message,\n            errorType: error.name,\n            tokenLength: authToken?.length\n          });\n        }\n      }\n\n      // Route handling\n      if (url.pathname === '/api/vapidPublicKey' && request.method === 'GET') {\n        try {\n          if (!env.VAPID_PUBLIC_KEY) {\n            throw new Error('VAPID_PUBLIC_KEY not configured');\n          }\n          return new Response(\n            JSON.stringify({ publicKey: env.VAPID_PUBLIC_KEY }), \n            { \n              headers: { \n                'Content-Type': 'application/json',\n                ...corsHeaders \n              } \n            }\n          );\n        } catch (error) {\n          return new Response(\n            JSON.stringify({ error: error.message }), \n            { \n              status: 500,\n              headers: { \n                'Content-Type': 'application/json',\n                ...corsHeaders \n              } \n            }\n          );\n        }\n      }\n\n      if (url.pathname === '/api/subscribe' && request.method === 'POST') {\n        const subscription = await request.json();\n        if (!subscription || !subscription.endpoint) {\n          return new Response(JSON.stringify({ error: 'Invalid subscription' }), {\n            status: 400,\n            headers: { 'Content-Type': 'application/json', ...corsHeaders }\n          });\n        }\n\n        // Get auth token and subscription key\n        const authToken = request.headers.get('Authorization')?.split('Bearer ')?.[1];\n        let subscriptionKey = subscription.endpoint; // default to endpoint as key\n        let userId = 'anonymous';\n\n        if (authToken) {\n          try {\n            console.log('Auth token:', authToken);\n            const userInfo = JSON.parse(decodeURIComponent(authToken));\n            userId = userInfo?.token?.identity.userId;\n            subscriptionKey = `subscription:${userId}`;\n          } catch (error) {\n            console.error('Invalid auth token:', error);\n          }\n        }\n\n        // Store subscription in KV with metadata\n        await env.SUBSCRIPTIONS.put(\n          subscriptionKey,\n          JSON.stringify({\n            subscription,\n            userId,\n            createdAt: new Date().toISOString(),\n            lastUsed: new Date().toISOString()\n          })\n        );\n\n        return new Response(JSON.stringify({ success: true }), {\n          headers: { 'Content-Type': 'application/json', ...corsHeaders }\n        });\n      }\n\n      if (url.pathname === '/api/notify' && request.method === 'POST') {\n        const { message, key } = await request.json();\n        \n        // If key is provided, only notify that specific subscription\n        if (key) {\n          const data = await env.SUBSCRIPTIONS.get(key, 'json');\n          if (!data) {\n            return new Response(JSON.stringify({ \n              error: 'Subscription not found' \n            }), {\n              status: 404,\n              headers: { 'Content-Type': 'application/json', ...corsHeaders }\n            });\n          }\n\n          console.log('Data from KV:', data);\n          console.log('Subscription:', data.subscription);\n          console.log('Endpoint:', data.subscription.endpoint);\n\n          try {\n            const token = await createVAPIDToken(\n              data.subscription.endpoint,\n              env.VAPID_PUBLIC_KEY,\n              env.VAPID_PRIVATE_KEY\n            );\n\n            const response = await fetch(data.subscription.endpoint, {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `vapid ${token}`,\n                'TTL': '86400'\n              },\n              body: JSON.stringify({\n                title: 'Barzo',\n                body: message || 'Test notification!',\n                icon: '/icon-192.png',\n                badge: '/icon-192.png',\n                data: {\n                  url: '/?source=push'\n                }\n              })\n            });\n\n            if (!response.ok) {\n              throw new Error(`HTTP error! status: ${response.status}`);\n            }\n\n            // Update last used timestamp\n            await env.SUBSCRIPTIONS.put(key, JSON.stringify({\n              ...data,\n              lastUsed: new Date().toISOString()\n            }));\n\n            return new Response(JSON.stringify({ \n              success: true,\n              message: 'Notification sent'\n            }), {\n              headers: { 'Content-Type': 'application/json', ...corsHeaders }\n            });\n          } catch (error) {\n            return new Response(JSON.stringify({ \n              error: error.message \n            }), {\n              status: 500,\n              headers: { 'Content-Type': 'application/json', ...corsHeaders }\n            });\n          }\n        }\n\n        // Original broadcast notification code...\n        // List all subscriptions\n        const subscriptionList = await env.SUBSCRIPTIONS.list();\n        const results = [];\n        const now = new Date().getTime();\n\n        for (const key of subscriptionList.keys) {\n          const data = await env.SUBSCRIPTIONS.get(key.name, 'json');\n          if (!data) continue;\n\n          // Check if subscription is too old\n          const createdAt = new Date(data.createdAt).getTime();\n          if (now - createdAt > MAX_SUBSCRIPTION_AGE) {\n            await env.SUBSCRIPTIONS.delete(key.name);\n            results.push({ \n              success: false, \n              endpoint: key.name, \n              error: 'Subscription expired' \n            });\n            continue;\n          }\n\n          try {\n            // Create VAPID JWT token\n            const token = await createVAPIDToken(\n              data.subscription.endpoint,\n              env.VAPID_PUBLIC_KEY,\n              env.VAPID_PRIVATE_KEY\n            );\n\n            const response = await fetch(data.subscription.endpoint, {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `vapid ${token}`,\n                'TTL': '86400'\n              },\n              body: JSON.stringify({\n                title: 'Barzo',\n                body: message || 'You have a new message!',\n                icon: '/icon-192.png',\n                badge: '/icon-192.png',\n                data: {\n                  url: '/?source=push'\n                }\n              })\n            });\n\n            if (!response.ok) {\n              throw new Error(`HTTP error! status: ${response.status}`);\n            }\n\n            // Update last used timestamp\n            await env.SUBSCRIPTIONS.put(\n              key.name,\n              JSON.stringify({\n                ...data,\n                lastUsed: new Date().toISOString()\n              })\n            );\n\n            results.push({ success: true, endpoint: key.name });\n          } catch (error) {\n            results.push({ success: false, endpoint: key.name, error: error.message });\n            // Remove failed subscription\n            await env.SUBSCRIPTIONS.delete(key.name);\n          }\n        }\n\n        return new Response(JSON.stringify({ \n          results,\n          activeSubscriptions: results.filter(r => r.success).length \n        }), {\n          headers: { 'Content-Type': 'application/json', ...corsHeaders }\n        });\n      }\n\n      return new Response('Not found', { status: 404, headers: corsHeaders });\n    } catch (error) {\n      return new Response(JSON.stringify({ error: error.message }), {\n        status: 500,\n        headers: { 'Content-Type': 'application/json', ...corsHeaders }\n      });\n    }\n  }\n};\n\n// VAPID JWT helper functions\nasync function createVAPIDToken(audience, publicKey, privateKey) {\n  console.log('1. Starting VAPID token creation with inputs:', {\n    audience,\n    publicKeyLength: publicKey?.length,\n    privateKeyLength: privateKey?.length,\n    publicKeyStart: publicKey?.substring(0, 10),\n    privateKeyStart: privateKey?.substring(0, 10)\n  });\n\n  const header = {\n    typ: 'JWT',\n    alg: 'ES256'\n  };\n  console.log('2. Created JWT header:', header);\n\n  const now = Math.floor(Date.now() / 1000);\n  const payload = {\n    aud: new URL(audience).origin,\n    exp: now + 12 * 3600,\n    sub: 'mailto:admin@barzo.app'\n  };\n  console.log('3. Created JWT payload:', payload);\n\n  const encodedHeader = btoa(JSON.stringify(header));\n  const encodedPayload = btoa(JSON.stringify(payload));\n  const unsignedToken = `${encodedHeader}.${encodedPayload}`;\n  console.log('4. Created unsigned token:', {\n    encodedHeader,\n    encodedPayload,\n    unsignedToken\n  });\n\n  try {\n    console.log('5. Starting key conversion process');\n    const keyData = urlBase64ToUint8Array(privateKey);\n    console.log('6. Converted private key to Uint8Array:', {\n      originalLength: privateKey.length,\n      processedLength: keyData.length,\n      firstBytes: Array.from(keyData.slice(0, 5)),\n      isTypical: keyData.length === 32\n    });\n\n    // Convert to JWK format - only use the private key component\n    const jwk = {\n      kty: 'EC',\n      crv: 'P-256',\n      d: btoa(String.fromCharCode.apply(null, keyData)),\n      ext: true\n    };\n\n    console.log('7. Created JWK:', {\n      kty: jwk.kty,\n      crv: jwk.crv,\n      hasD: !!jwk.d,\n      dLength: jwk.d?.length\n    });\n\n    // Import as private key\n    const key = await crypto.subtle.importKey(\n      'jwk',\n      jwk,\n      {\n        name: 'ECDSA',\n        namedCurve: 'P-256',\n        hash: { name: 'SHA-256' }\n      },\n      true, // Make extractable to verify the key\n      ['sign']\n    );\n\n    console.log('8. Private key imported successfully');\n\n    console.log('9. Preparing to sign token');\n    const encoder = new TextEncoder();\n    const signatureInput = encoder.encode(unsignedToken);\n    console.log('10. Token encoded for signing:', {\n      inputLength: signatureInput.length,\n      firstBytes: Array.from(signatureInput.slice(0, 5))\n    });\n    \n    console.log('11. Signing token');\n    const signature = await crypto.subtle.sign(\n      {\n        name: 'ECDSA',\n        hash: { name: 'SHA-256' },\n      },\n      key,\n      signatureInput\n    );\n    console.log('12. Token signed successfully');\n\n    const encodedSignature = btoa(String.fromCharCode(...new Uint8Array(signature)));\n    console.log('13. Signature encoded:', {\n      signatureLength: encodedSignature.length,\n      signatureStart: encodedSignature.substring(0, 10)\n    });\n\n    const finalToken = `${unsignedToken}.${encodedSignature}`;\n    console.log('14. Final token created:', {\n      length: finalToken.length,\n      start: finalToken.substring(0, 20)\n    });\n\n    return finalToken;\n\n  } catch (error) {\n    console.error('VAPID token creation failed:', {\n      step: error.step || 'unknown',\n      error: error.message,\n      name: error.name,\n      stack: error.stack,\n      privateKeyFormat: {\n        length: privateKey?.length,\n        isBase64: /^[A-Za-z0-9+/=]+$/.test(privateKey),\n        containsUrlSafeChars: /^[A-Za-z0-9\\-_]+$/.test(privateKey),\n        sample: privateKey?.substring(0, 10)\n      },\n      keyData: Array.from(urlBase64ToUint8Array(privateKey).slice(0, 5))\n    });\n    throw error;\n  }\n}\n\n// Modified urlBase64ToUint8Array to include more logging\nfunction urlBase64ToUint8Array(base64String) {\n  console.log('a. Starting base64 conversion:', {\n    input: base64String.substring(0, 10) + '...',\n    length: base64String.length\n  });\n\n  // First convert from URL-safe to standard base64\n  const base64 = base64String\n    .replace(/-/g, '+')\n    .replace(/_/g, '/');\n  \n  console.log('b. Converted to standard base64:', {\n    converted: base64.substring(0, 10) + '...'\n  });\n\n  // Add padding if needed\n  const padding = '='.repeat((4 - base64.length % 4) % 4);\n  const padded = base64 + padding;\n\n  console.log('c. Added padding:', {\n    paddingLength: padding.length,\n    finalLength: padded.length,\n    final: padded.substring(0, 10) + '...'\n  });\n\n  // Convert to binary\n  const rawData = atob(padded);\n  const outputArray = new Uint8Array(rawData.length);\n\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n\n  console.log('d. Converted to Uint8Array:', {\n    length: outputArray.length,\n    firstBytes: Array.from(outputArray.slice(0, 5))\n  });\n\n  return outputArray;\n}\n\n// Add at the top with other constants\nconst MAX_SUBSCRIPTION_AGE = 180 * 24 * 60 * 60 * 1000; // 180 days in milliseconds ", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"/Users/skotay/Documents/code/barzo-pwa/worker/index.js\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"/Users/skotay/Documents/code/barzo-pwa/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"/Users/skotay/Documents/code/barzo-pwa/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"/Users/skotay/Documents/code/barzo-pwa/worker/index.js\";\n\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"/Users/skotay/Documents/code/barzo-pwa/.wrangler/tmp/bundle-5AUzdH/middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"/Users/skotay/Documents/code/barzo-pwa/node_modules/wrangler/templates/middleware/common.ts\";\nimport type { WorkerEntrypointConstructor } from \"/Users/skotay/Documents/code/barzo-pwa/.wrangler/tmp/bundle-5AUzdH/middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"/Users/skotay/Documents/code/barzo-pwa/.wrangler/tmp/bundle-5AUzdH/middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n"],
  "mappings": "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",
  "names": ["corsHeaders", "authToken", "key"]
}
